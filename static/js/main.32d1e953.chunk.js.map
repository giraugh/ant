{"version":3,"sources":["hooks/useAnt.js","hooks/useQueryParam.js","components/Game/gameStyle.js","components/Game/Game.js","components/Cell/cellStyle.js","components/Cell/Cell.js","App.js","index.js"],"names":["useAnt","gridWidth","gridHeight","useState","antDir","setAntDir","antPos","setAntPos","gridState","setGridState","useEffect","Array","from","length","map","Math","floor","antIndex","state","cells","next","theta","xd","cos","sin","yd","nextAntDir","round","nextState","nextAntPos","flipCellState","i","resetGrid","useQueryParam","name","defaultValue","params","queryString","parse","window","location","search","value","setValue","newUrl","stringifyUrl","query","url","href","history","replaceState","Container","styled","section","Grid","div","ButtonGroup","Button","button","Game","playing","setPlaying","gridSize","timer","setInterval","clearInterval","style","val","filled","isAnt","onClick","disabled","GridCell","Cell","className","onMouseDown","onMouseEnter","e","buttons","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32d1e953.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useAnt = (gridWidth, gridHeight) => {\n  const [antDir, setAntDir] = useState([1, 0]) // Cartesian Vector\n  const [antPos, setAntPos] = useState([0, 0]) // Cartesian Vector\n  const [gridState, setGridState] = useState([])\n\n  // Construct and init Grid\n  useEffect(() => {\n    setGridState(\n      Array.from({ length: gridHeight*gridWidth }).map(() => 0)\n    )\n    setAntPos([Math.floor(gridWidth / 2), Math.floor(gridHeight / 2)])\n  }, [gridWidth, gridHeight])\n\n  const flipCellState = i => {\n    let nextState = [...gridState]\n    nextState[i] = 1 - nextState[i]\n    setGridState(nextState)\n  }\n\n  const resetGrid = () => {\n    setGridState(\n      Array.from({ length: gridHeight*gridWidth }).map(() => 0)\n    )\n    setAntPos([Math.floor(gridWidth / 2), Math.floor(gridHeight / 2)])\n  }\n\n  // Progress state\n  const next = () => {\n    // Find ant\n    const antIndex = antPos[1] * gridWidth + antPos[0]\n\n    // Rotate Ant\n    const theta = gridState[antIndex] === 1 ? -3.14/2 : 3.14/2\n    const xd = antDir[0] * Math.cos(theta) - antDir[1] * Math.sin(theta)\n    const yd = antDir[0] * Math.sin(theta) + antDir[1] * Math.cos(theta)\n    const nextAntDir = [Math.round(xd), Math.round(yd)]\n\n    // Flip Cell\n    let nextState = [...gridState]\n    nextState[antIndex] = 1 - gridState[antIndex]\n    \n    // Move ant\n    const nextAntPos = [\n      (antPos[0] + nextAntDir[0]) % gridWidth,\n      (antPos[1] + nextAntDir[1]) % gridHeight,\n    ]\n\n    // Update state for next timestep\n    setGridState(nextState)\n    setAntPos(nextAntPos)\n    setAntDir(nextAntDir)\n  }\n\n  const antIndex = antPos[1] * gridWidth + antPos[0]\n  return { state: { cells: gridState, antIndex }, next, flipCellState, resetGrid }\n}\n\nexport default useAnt\n","import { useState } from 'react'\nimport queryString from 'query-string'\n\nconst useQueryParam = (name, defaultValue) => {\n  // Is there a param?\n  const params = queryString.parse(window.location.search)\n  const hasParam = !!params[name]\n  defaultValue = hasParam ? params[name] : defaultValue\n\n  // use state  \n  const [value, setValue] = useState(defaultValue)\n\n  // wrap set value with query string write operation\n  const setValueWithQuery = (value) => {\n    const params = queryString.parse(window.location.search)\n    const newUrl = queryString.stringifyUrl({query: {...params, [name]: value}, url: window.location.href})\n    window.history.replaceState(null, '', newUrl)\n    return setValue(value)\n  }\n\n  return [value, setValueWithQuery]\n}\n\nexport default useQueryParam\n","import styled from 'styled-components'\n\nexport const Container = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1em;\n  padding: 2em;\n  margin-top: 0em;\n  padding-top: .2em;\n\n  h1 {\n    font-size: 2.5rem;\n    margin-bottom: 0;\n  }\n`\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(var(--width), 1fr);\n  border-radius: .2rem;\n  overflow: hidden;\n`\n\nexport const ButtonGroup = styled.div`\n  display: flex;\n  gap: .5em;\n\n  button {\n    min-width: 7em;\n  }\n`\n\nexport const Button = styled.button`\n  --highlight: #585d9d;\n  outline: none;\n  border: none;\n  padding: .5em 2em;\n  background-color: var(--highlight);\n  font-size: 1.1rem;\n  border-radius: .2em;\n  color: white;\n  cursor: pointer;\n  border: 2px solid transparent;\n\n  &:hover:not([disabled]){\n    background: white;\n    color: var(--highlight);\n    border: 2px solid var(--highlight);\n  }\n\n  &[disabled] {\n    opacity: .5;\n    cursor: default;\n  }\n`\n","import React, { useState, useEffect } from 'react'\n\nimport { useAnt, useQueryParam } from 'hooks'\nimport { Cell } from 'components'\nimport { Grid, Container, Button, ButtonGroup } from './gameStyle.js'\n\nconst PLAY_INTERVAL = 10\n\n// Game component contains header, grid and buttons for play control\nconst Game = () => {\n  const [playing, setPlaying] = useState(true)\n  const [gridSize] = useQueryParam('size', 31)\n  const [gridWidth, gridHeight] = [gridSize, gridSize]\n  const { state, next, flipCellState, resetGrid } = useAnt(gridWidth, gridHeight)\n\n  // Setup a callback to call next when 'playing'\n  useEffect(() => {\n    const timer = window.setInterval(() => {\n      if (playing)\n        next()\n    }, PLAY_INTERVAL)\n    return () => window.clearInterval(timer)\n  })\n\n  return <Container>\n    <h1>üêú</h1>\n    <Grid style={{'--width': gridWidth, '--height': gridHeight}}>\n      {state.cells.map((val, i) =>\n        <Cell filled={val} isAnt={state.antIndex === i} key={i} onClick={() => flipCellState(i)}/>\n      )}\n    </Grid>\n    <ButtonGroup>\n      <Button onClick={next} disabled={playing}>Next</Button>\n      <Button onClick={() => setPlaying(!playing)}>{playing ? 'Pause' : 'Play'}</Button>\n    </ButtonGroup>\n    <Button onClick={resetGrid}>Reset</Button>\n  </Container>\n}\n\nexport default Game\n","import styled from 'styled-components'\n\nexport const GridCell = styled.div`\n  --cell-size: 1.1em;\n  width: var(--cell-size);\n  height: var(--cell-size);\n  transition: background .05s;\n\n  &.empty {\n    background: white;\n  }\n\n  &.filled {\n    background: #78768b;\n  }\n\n  &.ant {\n    &::after {\n      content: 'üêú';\n      display: block;\n      width: 100%;\n      height: 100%;\n      text-align: center;\n      line-height: 100%;\n    }\n  }\n`\n\n","import React from 'react'\n\nimport { GridCell } from './cellStyle'\n\nconst Cell = ({ filled, isAnt, onClick }) =>\n  <GridCell\n    className={`${isAnt ? 'ant' : ''} ${filled ? 'filled' : 'empty'}`}\n    onMouseDown={onClick}\n    onMouseEnter={e => e.buttons > 0 ? onClick() : null} />\n\nexport default Cell\n","import React from 'react'\n\nimport { Game } from 'components'\n\nconst App = () =>\n  <main>\n    <Game />\n  </main>\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}