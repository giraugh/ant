{"version":3,"sources":["useAnt.js","appStyle.js","App.js","index.js"],"names":["useAnt","gridWidth","gridHeight","useState","antDir","setAntDir","antPos","setAntPos","gridState","setGridState","useEffect","Array","from","length","map","Math","floor","antIndex","state","cells","next","nextState","theta","xd","cos","sin","yd","nextAntDir","round","nextAntPos","randomise","random","Container","styled","section","Grid","div","GridCell","Button","button","Cell","filled","isAnt","className","App","playing","setPlaying","timer","window","setInterval","clearInterval","style","val","i","onClick","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAmDeA,EAjDA,SAACC,EAAWC,GACzB,MAA4BC,mBAAS,CAAC,EAAG,IAAzC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,mBAAS,CAAC,EAAG,IAAzC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAGAC,qBAAU,WACRD,EACEE,MAAMC,KAAK,CAAEC,OAAQX,EAAWD,IAAaa,KAAI,kBAAM,MAEzDP,EAAU,CAACQ,KAAKC,MAAMf,EAAY,GAAIc,KAAKC,MAAMd,EAAa,OAC7D,CAACD,EAAWC,IAGf,IA+BMe,EAAWX,EAAO,GAAKL,EAAYK,EAAO,GAChD,MAAO,CAAEY,MAAO,CAAEC,MAAOX,EAAWS,YAAYG,KAhCnC,WACX,IAAIC,EAAS,YAAOb,GAGdS,EAAWX,EAAO,GAAKL,EAAYK,EAAO,GAC1CgB,EAAgC,IAAxBd,EAAUS,IAAkB,KAAU,KAC9CM,EAAKnB,EAAO,GAAKW,KAAKS,IAAIF,GAASlB,EAAO,GAAKW,KAAKU,IAAIH,GACxDI,EAAKtB,EAAO,GAAKW,KAAKU,IAAIH,GAASlB,EAAO,GAAKW,KAAKS,IAAIF,GACxDK,EAAa,CAACZ,KAAKa,MAAML,GAAKR,KAAKa,MAAMF,IAG/CL,EAAUJ,GAAY,EAAIT,EAAUS,GAGpC,IAAMY,EAAa,EAChBvB,EAAO,GAAKqB,EAAW,IAAM1B,GAC7BK,EAAO,GAAKqB,EAAW,IAAMzB,GAGhCO,EAAaY,GACbd,EAAUsB,GACVxB,EAAUsB,IAW0CG,UARpC,WAChBrB,EACEE,MAAMC,KAAK,CAAEC,OAAQX,EAAWD,IAAaa,KAAI,kBAAMC,KAAKgB,SAAW,GAAK,EAAI,MAElFxB,EAAU,CAACQ,KAAKC,MAAMf,EAAY,GAAIc,KAAKC,MAAMd,EAAa,Q,cC1CrD8B,EAAYC,IAAOC,QAAV,iNAcTC,EAAOF,IAAOG,IAAV,iJAOJC,EAAWJ,IAAOG,IAAV,oZAuBRE,EAASL,IAAOM,OAAV,4c,OCbbC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OACX,cAACL,EAAD,CAAUM,UAAS,UAAKD,EAAQ,MAAQ,GAArB,YAA2BD,EAAS,SAAW,YAErDG,EA7BH,WACV,MAA8BzC,oBAAS,GAAvC,mBAAO0C,EAAP,KAAgBC,EAAhB,KAEA,EAAwB9C,EADS,GAAI,IAC7BkB,EAAR,EAAQA,MAAOE,EAAf,EAAeA,KAWf,OARAV,qBAAU,WACR,IAAMqC,EAAQC,OAAOC,aAAY,WAC3BJ,GACFzB,MAXc,IAalB,OAAO,kBAAM4B,OAAOE,cAAcH,OAG7B,eAACf,EAAD,WACL,8CACA,cAACG,EAAD,CAAMgB,MAAO,CAAC,UAdiB,GAcK,WAdD,IAcnC,SACGjC,EAAMC,MAAML,KAAI,SAACsC,EAAKC,GAAN,OACf,cAAC,EAAD,CAAMZ,OAAQW,EAAKV,MAAOxB,EAAMD,WAAaoC,GAAQA,QAGzD,cAACf,EAAD,CAAQgB,QAAS,kBAAMR,GAAYD,IAAnC,SAA8CA,EAAU,QAAU,SAClE,cAACP,EAAD,CAAQgB,QAASlC,EAAMmC,SAAUV,EAAjC,sBCxBJW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e8b1bcaa.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useAnt = (gridWidth, gridHeight) => {\n  const [antDir, setAntDir] = useState([1, 0]) // Cartesian Vector\n  const [antPos, setAntPos] = useState([0, 0]) // Cartesian Vector\n  const [gridState, setGridState] = useState([])\n\n  // Construct Grid\n  useEffect(() => {\n    setGridState(\n      Array.from({ length: gridHeight*gridWidth }).map(() => 0)\n    )\n    setAntPos([Math.floor(gridWidth / 2), Math.floor(gridHeight / 2)])\n  }, [gridWidth, gridHeight])\n\n  // Progress state\n  const next = () => {\n    let nextState = [...gridState]\n\n    // Rotate Ant\n    const antIndex = antPos[1] * gridWidth + antPos[0]\n    const theta = gridState[antIndex] === 1 ? -3.14/2 : 3.14/2\n    const xd = antDir[0] * Math.cos(theta) - antDir[1] * Math.sin(theta)\n    const yd = antDir[0] * Math.sin(theta) + antDir[1] * Math.cos(theta)\n    const nextAntDir = [Math.round(xd), Math.round(yd)]\n\n    // Flip Cell\n    nextState[antIndex] = 1 - gridState[antIndex]\n    \n    // Move ant\n    const nextAntPos = [\n      (antPos[0] + nextAntDir[0]) % gridWidth,\n      (antPos[1] + nextAntDir[1]) % gridHeight,\n    ]\n\n    setGridState(nextState)\n    setAntPos(nextAntPos)\n    setAntDir(nextAntDir)\n  }\n\n  const randomise = () => {\n    setGridState(\n      Array.from({ length: gridHeight*gridWidth }).map(() => Math.random() < .5 ? 1 : 0)\n    )\n    setAntPos([Math.floor(gridWidth / 2), Math.floor(gridHeight / 2)])\n  }\n\n  const antIndex = antPos[1] * gridWidth + antPos[0]\n  return { state: { cells: gridState, antIndex }, next, randomise }\n}\n\nexport default useAnt\n","import styled from 'styled-components'\n\nexport const Container = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1em;\n  padding: 2em;\n  margin-top: 4em;\n\n  h1 {\n    font-size: 2.5rem;\n    margin-bottom: 0;\n  }\n`\n\nexport const Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(var(--width), 1fr);\n  border-radius: .2rem;\n  overflow: hidden;\n`\n\nexport const GridCell = styled.div`\n  --cell-size: 1.1em;\n  width: var(--cell-size);\n  height: var(--cell-size);\n  background: lightgrey;\n  transition: background .05s;\n\n  &.filled {\n    background: darkgrey;\n  }\n\n  &.ant {\n    &::after {\n      content: 'üêú';\n      display: block;\n      width: 100%;\n      height: 100%;\n      text-align: center;\n      line-height: 100%;\n    }\n  }\n`\n\nexport const Button = styled.button`\n  --highlight: #03a9f4;\n  outline: none;\n  border: none;\n  padding: .5em 2em;\n  background-color: var(--highlight);\n  font-size: 1.1rem;\n  border-radius: .2em;\n  color: white;\n  cursor: pointer;\n  border: 2px solid transparent;\n\n  &:hover:not([disabled]){\n    background: white;\n    color: var(--highlight);\n    border: 2px solid var(--highlight);\n  }\n\n  &[disabled] {\n    opacity: .5;\n    cursor: default;\n  }\n`\n","import React, { useState, useEffect } from 'react'\n\nimport useAnt from './useAnt'\nimport { Grid, GridCell, Container, Button } from './appStyle.js'\n\nconst PLAY_INTERVAL = 10\n\nconst App = () => {\n  const [playing, setPlaying] = useState(true)\n  const [gridWidth, gridHeight] = [31, 31]\n  const { state, next } = useAnt(gridWidth, gridHeight)\n\n  // Setup a callback to call next when 'playing'\n  useEffect(() => {\n    const timer = window.setInterval(() => {\n      if (playing)\n        next()\n    }, PLAY_INTERVAL)\n    return () => window.clearInterval(timer)\n  })\n\n  return <Container>\n    <h1>üêú</h1>\n    <Grid style={{'--width': gridWidth, '--height': gridHeight}}>\n      {state.cells.map((val, i) =>\n        <Cell filled={val} isAnt={state.antIndex === i} key={i}/>\n      )}\n    </Grid>\n    <Button onClick={() => setPlaying(!playing)}>{playing ? 'Pause' : 'Play'}</Button>\n    <Button onClick={next} disabled={playing}>Next</Button>\n  </Container>\n}\n\nconst Cell = ({ filled, isAnt }) =>\n  <GridCell className={`${isAnt ? 'ant' : ''} ${filled ? 'filled' : 'empty'}`} />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}